Paquetes, variables y funciones.
Aprenda los componentes esenciales de cualquier programa en Go.

The Go Authors
https://golang.org

* Paquetes

Cada programa de Go se compone de paquetes.

Los programas en Go comienzan a ejecutarse en el paquete `main` que siempre debe existir como punto de entrada para el flujo del programa.

El programa que se muestra a la derecha está usando los paquetes con rutas de importación `"fmt"` y `"math/rand"`.

Por convención, el nombre del paquete es el mismo que el último elemento de la ruta de importación. Por ejemplo, el paquete `"math/rand"` comprende archivos que comienzan con la declaración `package`rand`. En cambio `"math"` viene siendo parte de la ruta donde se encuentra el paquete y a su vez tambien puede ser un paquete que comprende archivos que comienzan con la declaración `package`math`.

.play basics/packages.go

* Importaciones

El código que se muestra a la derecha agrupa las importaciones en una instrucción de importación "factorizada" entre paréntesis.

También se puede escribir varias declaraciones de importación, como:

	import "fmt"
	import "math"

Pero es un buen estilo o practica usar la declaración de importación factorizada cuando son multiples importaciones.

.play basics/imports.go

* Nombres exportados

En Go, un nombre se exporta si comienza con una letra mayúscula.
Por ejemplo, `Pizza` es un nombre exportado, al igual que `Pi`, que se exporta desde el paquete `math`.

Aquí `pizza` y `pi` no comienzan con una letra mayúscula, por lo que no se exportan.

Al importar un paquete, solo se puede hacer referencia a sus nombres exportados.
Cualquier nombre "no exportado" no es accesible desde fuera del paquete.

Ejecute el código. Observe el mensaje de error.

Para corregir el error, cambie el nombre de `math.pi` a `math.Pi` y vuelva a intentarlo.

.play basics/exported-names.go

* Funciones

Una función puede tomar cero o más argumentos.

En el ejemplo que se muestra a la derecha, `add` toma dos parámetros de tipo `int`.

Observar que el tipo viene _después_ del nombre de la variable.

(Para obtener más información sobre por qué los tipos tienen el aspecto que tienen, consulte el [[https://blog.golang.org/gos-declaration-syntax][artículo sobre la sintaxis de declaración de Go]].)

.play basics/functions.go

* Funciones continuación

Cuando dos o más parámetros de función con nombre consecutivos comparten el mismo tipo, se puede omitir el tipo de todos menos del último.

En el ejemplo, se acorta

	x int, y int

a:

	x, y int

.play basics/functions-continued.go

* Múltiples resultados

Una función puede devolver cualquier número de resultados.

La función `swap` mostrada a la derecha devuelve dos cadenas de texto.

.play basics/multiple-results.go

* Valores de retorno con nombre

Los valores de retorno de Go pueden ser nombrados. Si es así, se tratan como variables definidas en la parte superior de la función.

Estos nombres deben utilizarse para documentar el significado de los valores devueltos.

Una instrucción `return` sin argumentos devuelve los valores de retorno nombrados. Esto se conoce como retorno "desnudo" ("naked" return).

Las declaraciones de retorno desnudas deben usarse solo en funciones cortas, como en el ejemplo que se muestra aquí a la derecha. En funciones más largas pueden dañar la legibilidad.

.play basics/named-results.go

* Variables

La instrucción `var` declara una lista de variables; como en las listas de argumentos de función, el tipo es el último en la declaración.

Una sentencia `var` puede estar a nivel de paquete o de función. Ambos se muestran en el ejemplo de la derecha.

.play basics/variables.go

* Variables con inicializadores

Una declaración var puede incluir inicializadores, uno por variable.

Si hay un inicializador, se puede omitir el tipo; la variable tomará el tipo del inicializador.

Como se muestra en el ejemplo de la derecha se inicializan sin tipo.

.play basics/variables-with-initializers.go

* Declaración corta de variables

Sólo dentro de una función, la declaración de asignación corta `:=` se puede usar en lugar de una declaración `var` con tipo implícito.

Fuera de una función, cada declaración comienza con una palabra clave (`var`, `func`, etc.), por lo que la construcción `:=` no está disponible en ese ámbito superior.

.play basics/short-variable-declarations.go

* Tipos basicos

Los tipos básicos en Go son

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias para uint8

	rune // alias para int32
	     // representa un punto de código Unicode

	float32 float64

	complex64 complex128

El ejemplo de la derecha muestra variables de varios tipos, y también que las declaraciones de variables pueden "factorizarse" en bloques, como con las declaraciones de importación.

Los tipos `int`, `uint` y `uintptr` suelen tener 32 bits de longitud en sistemas de 32 bits y 64 bits de longitud en sistemas de 64 bits.
Cuando se necesite un valor entero, debe usarse `int` a menos que tenga una razón específica para usar un tipo entero de tamaño o sin signo.

.play basics/basic-types.go

* Valores cero

Las variables declaradas sin un valor inicial explícito reciben su valor cero
(_zero_value_) por defecto.

El valor cero es:

- `0` para tipos numéricos,
- `false` para tipo booleano, y
- `""` (la cadena vacía) para cadenas de texto.

.play basics/zero.go

* Conversiones de tipo

La expresión `T(v)` convierte el valor `v` al tipo `T`.

Algunas conversiones numéricas:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

O, dicho más simple:

	i := 42
	f := float64(i)
	u := uint(f)

A diferencia de C, en Go la asignación entre elementos de diferente tipo requiere una conversión explícita.
En el ejemplo de la derecha intente eliminar las conversiones `float64` o `uint` en el ejemplo y vea qué sucede.

.play basics/type-conversions.go

* Inferencia de tipo

Al declarar una variable sin especificar un tipo explícito (ya sea utilizando la sintaxis de expresión `:=` o  `var`=`), el tipo de variable se deduce del valor del lado derecho.

Cuando se escribe el lado derecho de la declaración, la nueva variable es del mismo tipo:

	var i int
	j := i // j es int

Pero cuando el lado derecho contiene una constante numérica sin tipo, la nueva variable puede ser `int`, `float64` o `complex128` dependiendo de la precisión de la constante:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

En el ejemplo de la derecha intente cambiar el valor inicial de `v` en el código de ejemplo y observe cómo se ve afectado su tipo.

.play basics/type-inference.go

* Constantes

Las constantes se declaran como variables, pero con la palabra clave `const`.

Las constantes pueden ser caracteres, cadenas de texto, booleanos o valores numéricos.

Las constantes no se pueden declarar usando la sintaxis `:=`.

.play basics/constants.go

* Constantes numéricas

Las constantes numéricas son _valores_ de alta precisión.

Una constante sin tipo toma el tipo que necesita su contexto.

En el ejemplo de la derecha intente imprimir `needInt(Big)` también.

(Un `int` puede almacenar como máximo un número entero de 64 bits y, a veces, menos).

.play basics/numeric-constants.go

* ¡Felicitaciones!

¡Has terminado esta lección!

Puede volver a la lista de [[/list][módulos]] para encontrar qué aprender a continuación, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
